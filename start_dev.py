#!/usr/bin/env python3
"""
Development server startup script for Portfolio Website
Starts both backend (Flask) and frontend (Vite) servers
"""

import subprocess
import sys
import os
import time
import threading
from pathlib import Path

def run_backend():
    """Start the Flask backend server"""
    backend_dir = Path("backend")
    if not backend_dir.exists():
        print("‚ùå Backend directory not found!")
        return
    
    os.chdir(backend_dir)
    print("üöÄ Starting Flask backend server on http://0.0.0.0:5000")
    try:
        subprocess.run([sys.executable, "app.py"], check=True)
    except KeyboardInterrupt:
        print("\nüõë Backend server stopped")
    except Exception as e:
        print(f"‚ùå Backend error: {e}")

def run_frontend():
    """Start the Ionic frontend server"""
    frontend_dir = Path("frontend")
    if not frontend_dir.exists():
        print("‚ùå Frontend directory not found!")
        return
    
    os.chdir(frontend_dir)
    print("üöÄ Starting Ionic frontend server on http://192.168.1.210:8100")
    try:
        # Check if ionic is available
        subprocess.run(["ionic", "--version"], check=True, capture_output=True)
        subprocess.run(["ionic", "serve", "--host", "192.168.1.210", "--port", "8100"], check=True)
    except KeyboardInterrupt:
        print("\nüõë Frontend server stopped")
    except FileNotFoundError:
        print("‚ùå Ionic CLI not found. Please install Ionic CLI: npm install -g @ionic/cli")
        print("   Or use npm run dev instead")
        try:
            subprocess.run(["npm", "run", "dev"], check=True)
        except Exception as e:
            print(f"‚ùå npm run dev also failed: {e}")
    except Exception as e:
        print(f"‚ùå Frontend error: {e}")

def get_local_ip():
    """Get the local IP address for network access"""
    import socket
    try:
        # Connect to a remote address to determine local IP
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        return local_ip
    except:
        return "localhost"

def create_env_file(local_ip):
    """Create or update the .env file with the correct backend URL"""
    env_file = Path("frontend/.env")
    env_content = f"""# Backend API URL for network access
# Automatically generated by start_dev.py
VITE_BACKEND_URL=http://{local_ip}:5000

# For local development only (same device)
# VITE_BACKEND_URL=http://localhost:5000
"""
    
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        print(f"‚úÖ Created/updated frontend/.env with backend URL: http://{local_ip}:5000")
    except Exception as e:
        print(f"‚ö†Ô∏è  Could not create .env file: {e}")
        print(f"   Please manually create frontend/.env with: VITE_BACKEND_URL=http://{local_ip}:5000")

def main():
    print("üéØ Portfolio Website Development Server")
    print("=" * 50)
    
    # Get local IP for network access
    local_ip = get_local_ip()
    print(f"üì± Network access will be available at:")
    print(f"   Frontend: http://{local_ip}:3000")
    print(f"   Backend API: http://{local_ip}:5000")
    print("=" * 50)
    
    # Create/update .env file with correct backend URL
    create_env_file(local_ip)
    
    # Start backend in a separate thread
    backend_thread = threading.Thread(target=run_backend, daemon=True)
    backend_thread.start()
    
    # Give backend a moment to start
    time.sleep(2)
    
    # Start frontend in main thread
    run_frontend()

if __name__ == "__main__":
    main() 